{
    "rag_query": {
        "prefix": "ragquery",
        "body": [
            "from services.retriever import HybridRetriever",
            "retriever = HybridRetriever()",
            "await retriever.initialize()",
            "results = await retriever.retrieve(\"${1:query}\")",
            "print(f\"检索结果: {results}\")"
        ],
        "description": "RAG查询代码片段"
    },
    "add_adapter": {
        "prefix": "adapter",
        "body": [
            "class ${1:AdapterName}Adapter(BaseDocAdapter):",
            "    async def authenticate(self):",
            "        \"\"\"${2:认证方法}\"\"\"",
            "        pass",
            "",
            "    async def fetch_documents(self):",
            "        \"\"\"获取文档列表\"\"\"",
            "        pass",
            "",
            "    async def download_content(self, doc_id: str):",
            "        \"\"\"下载文档内容\"\"\"",
            "        pass"
        ],
        "description": "添加新文档适配器"
    },
    "fastapi_route": {
        "prefix": "apiroute",
        "body": [
            "@router.${1:get}(",
            "    \"/${2:path}\",",
            "    summary=\"${3:接口描述}\",",
            "    responses={",
            "        200: {\"description\": \"${4:成功响应}\"},",
            "        400: {\"description\": \"无效请求参数\"},",
            "        500: {\"description\": \"服务器内部错误\"}",
            "    }",
            ")",
            "async def ${5:function_name}():",
            "    \"\"\"",
            "    ${6:接口功能描述}",
            "    \"\"\"",
            "    try:",
            "        ${7:# 实现代码}",
            "        return {\"status\": \"success\"}",
            "    except Exception as e:",
            "        raise HTTPException(status_code=500, detail=f\"错误: {str(e)}\")"
        ],
        "description": "FastAPI路由模板"
    },
    "process_document": {
        "prefix": "procdoc",
        "body": [
            "async def process_document(content: str, metadata: Dict[str, Any]):",
            "    # 处理文档",
            "    processor = DocumentProcessor()",
            "    chunks = processor.process(content, metadata.get(\"file_type\", \"txt\"), metadata)",
            "    ",
            "    # 提取文本和元数据",
            "    texts = [chunk[\"content\"] for chunk in chunks]",
            "    metadatas = [chunk[\"metadata\"] for chunk in chunks]",
            "    ",
            "    # 生成向量",
            "    vector_service = get_vector_service()",
            "    vectors = await vector_service.encode_async(texts)",
            "    ",
            "    # 存储向量",
            "    await vector_service.upsert(",
            "        vectors=vectors,",
            "        payloads=[{",
            "            \"content\": text,",
            "            **metadata",
            "        } for text, metadata in zip(texts, metadatas)]",
            "    )",
            "    ",
            "    return len(chunks)"
        ],
        "description": "文档处理流程"
    }
}